/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    /** Get all routes available for this apis */
    get: operations["get-root"];
    parameters: {};
  };
  "/agreements": {
    /** Retrive all agreements */
    get: operations["get-agreements"];
    /** Create a new Agreement */
    post: operations["post-agreements"];
    parameters: {};
  };
  "/agreements/{agreementId}": {
    /** Get a specific Agreement */
    get: operations["get-agreements-agreement-id"];
    /** Put a specific Agreement */
    put: operations["put-agreements-agreement-id"];
    /** Delete a specific Agreement */
    delete: operations["delete-agreements-agreement-id"];
    parameters: {
      path: {
        agreementId: string;
      };
    };
  };
  "/authenticate": {
    /** A request to login with your username and password */
    post: operations["post-authenticate"];
  };
  "/browsers": {
    get: operations["get-browsers"];
  };
  "/bugs/{bugId}/status": {
    patch: operations["patch-bugs-bugId-status"];
    parameters: {
      path: {
        bugId: string;
      };
    };
  };
  "/campaignTypes": {
    get: operations["get-campaign-types"];
    parameters: {};
  };
  "/campaigns": {
    /** Get all the Campaigns you have access to */
    get: operations["get-campaigns"];
    /** Create a new Campaign if you have access to the creation */
    post: operations["post-campaigns"];
  };
  "/campaigns/forms": {
    get: operations["get-campaigns-forms"];
    post: operations["post-campaigns-forms"];
    parameters: {};
  };
  "/campaigns/forms/{formId}": {
    get: operations["get-campaigns-forms-formId"];
    put: operations["put-campaigns-forms-formId"];
    parameters: {
      path: {
        formId: string;
      };
    };
  };
  "/campaigns/owners": {
    /** Get all the owners of campaigns you have access to */
    get: operations["get-campaigns-owners"];
    parameters: {};
  };
  "/campaigns/{campaignId}/visibility": {
    patch: operations["patch-campaigns-campaignId-visibility"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/campaigns/{campaign}": {
    /** Get the data of a Campaign if you have access to it */
    get: operations["get-campaigns-campaign"];
    /** Edit the data of a Campaign if you have access to it */
    put: operations["put-campaigns-campaign"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/bugs": {
    /** Get all bugs of a Campaign if you have access to it */
    get: operations["get-campaigns-cid-bugs"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/bugs/{bugId}": {
    /** Get single bug of a Campaign if you have access to it */
    get: operations["get-campaigns-single-bug"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
        bugId: string;
      };
    };
  };
  "/campaigns/{campaign}/bugs/{bugId}/aiReview": {
    /** Get ai review for a single bug of a Campaign if you have access to it */
    get: operations["get-campaigns-single-bug-ai-review"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
        bugId: string;
      };
    };
  };
  "/campaigns/{campaign}/candidates": {
    get: operations["get-campaigns-campaign-candidates"];
    /** The Tryber will be inserted as a candidate Tryber on a specific Campaign */
    post: operations["post-campaigns-campaign-candidates"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/clusters": {
    /** Get all clusters for  a specific campaign */
    get: operations["get-campaigns-campaign-clusters"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/forms": {
    get: operations["get-campaigns-campaign-forms"];
    parameters: {
      path: {
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/groups": {
    /** Get all groups used in a Campaign if you have access to it */
    get: operations["get-campaigns-cid-groups"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/observations": {
    /** Get observations for a campaign */
    get: operations["get-campaigns-campaign-observations"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/payouts": {
    get: operations["get-campaigns-campaign-payouts"];
    put: operations["put-campaigns-campaign-payouts"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/preview": {
    post: operations["post-campaigns-campaign-preview"];
    parameters: {
      path: {
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/prospect": {
    get: operations["get-campaigns-campaign-prospect"];
    /** Make campaign perspective status done, and change exp points and tester payouts. */
    put: operations["put-campaigns-campaign-prospect"];
    patch: operations["patch-campaigns-campaign-prospect"];
    parameters: {
      path: {
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/prospect/{testerId}": {
    put: operations["put-campaigns-campaign-prospect-testerId"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        testerId: components["parameters"]["testerId"];
      };
    };
  };
  "/campaigns/{campaign}/stats": {
    get: operations["get-campaigns-campaign-stats"];
    parameters: {
      path: {
        campaign: string;
      };
    };
  };
  "/campaigns/{campaign}/tasks": {
    /** Get all UseCases linked to a Campaign */
    get: operations["get-campaigns-campaign-tasks"];
    /** Create a new UseCase and link it to a Campaign */
    post: operations["post-campaigns-campaign-tasks"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/campaigns/{campaign}/tasks/{task}": {
    /** Get the data of a UseCase in a Campaign */
    get: operations["get-campaigns-campaign-tasks-task"];
    /** Edit a UseCase in a Campaign */
    put: operations["put-campaigns-campaign-tasks-task"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
  };
  "/campaigns/{campaign}/ux": {
    /** Get the data of a UseCase in a Campaign */
    get: operations["get-campaigns-campaign-ux"];
    patch: operations["patch-campaigns-campaign-ux"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/certifications": {
    /** Get all certificatio */
    get: operations["get-certifications"];
    parameters: {};
  };
  "/countries/{code}/region": {
    get: operations["get-regions"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/custom_user_fields": {
    get: operations["get-customUserFields"];
    parameters: {};
  };
  "/customers": {
    /** Get all the customers you have access to */
    get: operations["get-customers"];
    post: operations["post-customers"];
    parameters: {};
  };
  "/customers/{customer}/projects": {
    get: operations["get-customers-customer-projects"];
    post: operations["post-customers-customer-projects"];
    parameters: {
      path: {
        customer: string;
      };
    };
  };
  "/devices/{device_type}/models": {
    /** Get all model of devices with theirs manufacturers */
    get: operations["get-devices-devices-type-model"];
    parameters: {
      path: {
        device_type: string;
      };
    };
  };
  "/devices/{device_type}/operating_systems": {
    /** Get all operating systems of a device type */
    get: operations["get-devices-operating-systems"];
    parameters: {
      path: {
        device_type: string;
      };
    };
  };
  "/devices/{device_type}/os_versions": {
    /** Get all versions of an operating systems */
    get: operations["get-devices-os-versions"];
    parameters: {
      path: {
        device_type: string;
      };
    };
  };
  "/dossiers": {
    post: operations["post-dossiers"];
    parameters: {};
  };
  "/dossiers/{campaign}": {
    get: operations["get-dossiers-campaign"];
    put: operations["put-dossiers-campaign"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/dossiers/{campaign}/availableTesters": {
    /**  */
    get: operations["get-dossiers-campaign-availableTesters"];
    parameters: {
      path: {
        campaign: string;
      };
    };
  };
  "/dossiers/{campaign}/manual": {
    post: operations["post-dossiers-campaign-manual"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/dossiers/{campaign}/phases": {
    put: operations["put-dossiers-campaign-phases"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/dossiers/{campaign}/preview": {
    post: operations["post-dossiers-campaign-preview"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
  };
  "/dossiers/{campaign}/quotations": {
    post: operations["post-dossiers-campaign-quotations"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/dossiers/{campaign}/quotations/{quote}": {
    patch: operations["patch-dossiers-campaign-quotations-quote"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
        quote: string;
      };
    };
  };
  "/dossiers/{campaign}/quotesHistory": {
    get: operations["get-dossiers-campaign-quotes-history"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/education": {
    /** Get all education levels */
    get: operations["get-education"];
  };
  "/employments": {
    /** Get all employments */
    get: operations["get-employments"];
  };
  "/jotforms/forms": {
    get: operations["get-jotforms"];
    parameters: {};
  };
  "/jotforms/forms/{formId}/questions": {
    get: operations["get-jotforms-forms-formId-questions"];
    parameters: {
      path: {
        formId: string;
      };
    };
  };
  "/jotforms/{campaign}": {
    post: operations["post-jotforms-campaignId"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/languages": {
    /** Get all languages */
    get: operations["get-languages"];
  };
  "/levels": {
    /** Get all levels */
    get: operations["get-levels"];
    parameters: {};
  };
  "/media": {
    /** Send a media for my bug to AppQuality Bucket. */
    post: operations["post-media"];
    delete: operations["delete-media"];
    parameters: {};
  };
  "/payments": {
    get: operations["get-payments"];
    parameters: {};
  };
  "/payments/{paymentId}": {
    post: operations["post-payments-paymentId"];
    /** delete a specific payment request */
    delete: operations["delete-payments-paymentId"];
    parameters: {
      path: {
        paymentId: string;
      };
    };
  };
  "/phases": {
    get: operations["get-phases"];
  };
  "/popups": {
    /** Retrieve all available popups for admin operations */
    get: operations["get-popups"];
    /** The new popup will be inserted as an available popup on admin areas */
    post: operations["post-popups"];
    parameters: {};
  };
  "/popups/{popup}": {
    /** Retrieve a signle popup for admin operations */
    get: operations["get-popups-popup"];
    /** Edit your popup with a new content or new rules */
    patch: operations["patch-popups-popup"];
    parameters: {
      path: {
        popup: number;
      };
    };
  };
  "/productTypes": {
    get: operations["get-productTypes"];
    parameters: {};
  };
  "/users": {
    /** Get all users you have access to */
    get: operations["get-users"];
    /** Create a new user */
    post: operations["post-users"];
  };
  "/users/by-email/{email}": {
    head: operations["head-users-by-email-email"];
    parameters: {
      path: {
        email: string;
      };
    };
  };
  "/users/by-role/{role}": {
    get: operations["get-users-by-role-role"];
    parameters: {
      path: {
        role: "tester_lead" | "quality_leader" | "ux_researcher" | "assistants";
      };
    };
  };
  "/users/me": {
    /** Get your user data */
    get: operations["get-users-me"];
    /** Edit your user data */
    put: operations["put-users-me"];
    delete: operations["delete-users-me"];
    /** Edit basic user fields */
    patch: operations["patch-users-me"];
  };
  "/users/me/additionals/{fieldId}": {
    /** The field data will be replaced with your new data */
    put: operations["put-users-me-additionals-fieldId"];
    parameters: {
      path: {
        /** The id of the field to edit */
        fieldId: number;
      };
    };
  };
  "/users/me/bugs": {
    /** Get all the bugs that you uploaded to AppQuality. */
    get: operations["get-users-me-bugs"];
    parameters: {};
  };
  "/users/me/campaigns": {
    /**
     * get available, and selected campaigns for a single user.
     * filterBy[accepted] = 1 retrieve accepted campaign only, otherwise retrieve available campaign.
     * filterBy[completed] = 1 get completed campaigns only (end date in the past)
     * filterBy[completed] = 0 get not completed campaigns only (end date today or in the future)
     * filterBy[statusID] = 1 get open campaigns
     * filterBy[statusID] = 2 get closed campaigns
     */
    get: operations["get-users-me-campaigns"];
  };
  "/users/me/campaigns/{campaignId}": {
    get: operations["get-users-me-campaigns-campaignId"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/bugs": {
    /** Send a user bug on a specific campaign */
    post: operations["post-users-me-campaigns-campaign-bugs"];
    parameters: {
      path: {
        /** the campaign id */
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/devices": {
    get: operations["get-users-me-campaigns-campaignId-devices"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/forms": {
    get: operations["get-users-me-campaign-campaignId-forms"];
    post: operations["post-users-me-campaigns-campaignId-forms"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/media": {
    post: operations["post-users-me-campaigns-campaignId-media"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/payout_data": {
    get: operations["get-users-me-campaigns-cid-payout-data"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/preview": {
    get: operations["get-users-me-campaigns-cid-preview"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/tasks": {
    get: operations["get-users-me-campaign-campaignId-tasks"];
    parameters: {
      path: {
        campaignId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/tasks/{taskId}": {
    post: operations["post-users-me-campaigns-campaign-tasks-task"];
    parameters: {
      path: {
        /** the campaign id */
        campaignId: string;
        taskId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/tasks/{taskId}/media": {
    /** Return a list of tester media uploaded on a specific Usecase of a specific Campaign */
    get: operations["get-users-me-campaigns-campaignId-tasks-taskId-media"];
    post: operations["post-users-me-campaigns-campaignId-tasks-taskId-media"];
    parameters: {
      path: {
        campaignId: string;
        taskId: string;
      };
    };
  };
  "/users/me/campaigns/{campaignId}/tasks/{taskId}/media/{mediaId}": {
    /** Delete a specific media of a specific campaign task if authorized */
    delete: operations["delete-users-me-campaigns-campaignId-tasks-taskId-media-mediaId"];
    parameters: {
      path: {
        campaignId: string;
        taskId: string;
        mediaId: string;
      };
    };
  };
  "/users/me/campaigns/{campaign}/compatible_devices": {
    get: operations["get-users-me-campaigns-campaignId-compatible-devices"];
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
  };
  "/users/me/certifications": {
    /** Add one certification to your profile */
    post: operations["post-users-me-certifications"];
  };
  "/users/me/certifications/{certificationId}": {
    /** The certification will be removed */
    delete: operations["delete-users-me-certifications-certificationId"];
    parameters: {
      path: {
        /** The id of the certification */
        certificationId: number;
      };
    };
  };
  "/users/me/devices": {
    /** Get all your device data */
    get: operations["get-users-me-devices"];
    /** Add a new device to your user */
    post: operations["post-users-me-devices"];
  };
  "/users/me/devices/{deviceId}": {
    /** Retrieve a single device */
    get: operations["get-users-me-devices-deviceId"];
    /** The device will be disabled and won't be available for selections and bugs submission. You can't remove a device currently involved in a campaign */
    delete: operations["delete-users-me-devices-deviceId"];
    /** You can change only operating system version */
    patch: operations["patch-users-me-devices-deviceId"];
    parameters: {
      path: {
        deviceId: number;
      };
    };
  };
  "/users/me/experience": {
    /** Get all the experience points earned in AppQuality. */
    get: operations["get-users-me-experience"];
  };
  "/users/me/fiscal": {
    /** Get your fiscal profile data */
    get: operations["get-users-me-fiscal"];
    /** Update your fiscal data */
    put: operations["put-users-me-fiscal"];
    /** Create a new fiscal data entry from empty state */
    post: operations["post-users-me-fiscal"];
  };
  "/users/me/languages": {
    /** Edit your spoken languages */
    put: operations["put-users-me-languages"];
    /** Add one of the languages to your profile */
    post: operations["post-users-me-languages"];
  };
  "/users/me/languages/{languageId}": {
    /** The language will be removed from your profile */
    delete: operations["delete-users-me-languages-languageId"];
    parameters: {
      path: {
        /** The id of the language */
        languageId: number;
      };
    };
  };
  "/users/me/payments": {
    /** Return all payment requests */
    get: operations["get-users-me-payments"];
    post: operations["post-users-me-payments"];
    parameters: {};
  };
  "/users/me/payments/{payment}": {
    /** Return all attributions of a specific request */
    get: operations["get-users-me-payments-payment"];
    parameters: {
      path: {
        payment: string;
      };
    };
  };
  "/users/me/pending_booty": {
    /** Return all single attributions that dials the pending booty */
    get: operations["get-users-me-pending-booty"];
    parameters: {};
  };
  "/users/me/permissions": {
    /** Return all user permissions */
    get: operations["get-users-me-permissions"];
    parameters: {};
  };
  "/users/me/popups": {
    /** Get all popup defined for your user */
    get: operations["get-users-me-popups"];
  };
  "/users/me/popups/{popup}": {
    /** Get a single popup. Will set the retrieved popup as expired */
    get: operations["get-users-me-popups-popup"];
    parameters: {
      path: {
        popup: number;
      };
    };
  };
  "/users/me/rank": {
    get: operations["get-users-me-rank"];
    parameters: {};
  };
  "/users/me/rank/list": {
    get: operations["get-users-me-rank-list"];
  };
}

export interface components {
  schemas: {
    AdditionalField: {
      field_id: number;
      is_candidate?: boolean;
      name: string;
      text?: string;
      value: string;
    };
    Agreement: {
      expirationDate: string;
      /** @default false */
      isTokenBased?: boolean;
      note?: string;
      startDate: string;
      title: string;
      tokens: number;
      unitPrice: number;
    };
    /** AvailableDevice */
    AvailableDevice: {
      name: string;
    };
    /** Bug */
    Bug: {
      campaign?: components["schemas"]["CampaignOptional"] & {
        id?: number;
      };
      severity?: components["schemas"]["BugSeverity"];
      status?: components["schemas"]["BugStatus"];
      title?: string;
    };
    /**
     * BugLang
     * @enum {string}
     */
    BugLang: "IT" | "GB" | "ES" | "FR" | "DE";
    /** BugSeverity */
    BugSeverity: {
      id?: number;
      name?: string;
    };
    /** BugStatus */
    BugStatus: {
      description?: string;
      id?: number;
      name?: string;
    };
    /** BugTag */
    BugTag: {
      id: number;
      name: string;
    };
    /** BugType */
    BugType: {
      id?: number;
    };
    Campaign: components["schemas"]["CampaignOptional"] &
      components["schemas"]["CampaignRequired"];
    /** CampaignAdditionalField */
    CampaignAdditionalField: {
      error: string;
      name: string;
      slug: string;
    } & (
      | {
          options: string[];
          /** @enum {string} */
          type: "select";
        }
      | {
          regex: string;
          /** @enum {string} */
          type: "text";
        }
    );
    /** CampaignField */
    CampaignField: {
      id?: number;
    };
    CampaignOptional: {
      additionalFields?: components["schemas"]["CampaignField"][];
      allowed?: {
        bug_types?: components["schemas"]["BugType"][];
        replicabilities?: components["schemas"]["Replicability"][];
        severities?: components["schemas"]["BugSeverity"][];
      };
      /** @description True if you applied on this Campaign */
      applied?: boolean;
      /** @description If bugform is deactivated is a boolean else contains URLs to bugforms for each languages */
      bugform_link?: boolean | components["schemas"]["TranslatablePage"];
      /** @default 0 */
      csm_effort?: number;
      customerCanViewReviewing?: boolean;
      customer_title?: string;
      dates?: {
        close?: string;
        end?: string;
        start?: string;
      };
      devices?: {
        id?: string;
      }[];
      hasBugParade?: boolean;
      internal_id?: string;
      language?: string;
      manual_link?: components["schemas"]["TranslatablePage"];
      minNumberOfMedia?: number;
      name?: string;
      preview_link?: components["schemas"]["TranslatablePage"];
      projectManager?: components["schemas"]["User"];
      public?: boolean;
      status?: boolean;
      titleRule?: boolean;
      /** @default 0 */
      tokens?: number;
      /** @default 0 */
      ux_effort?: number;
      visibility?: {
        freeSpots?: number;
        totalSpots?: number;
        /** @enum {string} */
        type?: "available" | "unavailable" | "candidate";
      };
    };
    CampaignRequired: {
      campaign_type: components["schemas"]["CampaignType"];
      dates: {
        close: string;
        end: string;
        start: string;
      };
      name: string;
    };
    CampaignType: string | number;
    Certification: {
      /** Format: date */
      achievement_date: string;
      area: string;
      id?: number;
      institute: string;
      name: string;
    };
    /** CountryCode */
    CountryCode: string;
    /** Currency */
    Currency: {
      currency: string;
      value: number;
    };
    /** CustomUserFieldsData */
    CustomUserFieldsData: {
      allow_other?: boolean;
      format?: string;
      id: number;
      name: components["schemas"]["TranslatablePage"];
      options?: components["schemas"]["CustomUserFieldsDataOption"][];
      placeholder?: components["schemas"]["TranslatablePage"];
      type: components["schemas"]["CustomUserFieldsType"];
    };
    /** CustomUserFieldsDataOption */
    CustomUserFieldsDataOption: {
      id: number;
      name: string;
    };
    /**
     * CustomUserFieldsType
     * @enum {string}
     */
    CustomUserFieldsType: "text" | "select" | "multiselect";
    DossierCreationData: {
      additionals?: ({
        showInStats?: boolean;
      } & components["schemas"]["CampaignAdditionalField"])[];
      browsers?: number[];
      bugTypes?: number[];
      /** Format: date-time */
      closeDate?: string;
      countries?: components["schemas"]["CountryCode"][];
      csm?: number;
      description?: string;
      deviceList: number[];
      deviceRequirements?: string;
      /** Format: date-time */
      endDate?: string;
      goal?: string;
      languages?: string[];
      notes?: string;
      outOfScope?: string;
      productLink?: string;
      productType?: number;
      project: number;
      roles?: {
        role: number;
        user: number;
      }[];
      /** Format: date-time */
      startDate: string;
      target?: {
        cap?: number;
        genderQuote?: string;
        notes?: string;
        size?: number;
      };
      testType: number;
      title: {
        customer: string;
        tester?: string;
      };
      visibilityCriteria?: {
        ageRanges?: {
          max: number;
          min: number;
        }[];
        cuf?: {
          cufId: number;
          cufValueIds: number[];
        }[];
        gender?: number[];
        provinces?: string[];
      };
    };
    /** FiscalBirthCity */
    FiscalBirthCity:
      | {
          city: string;
          province: string;
        }
      | {
          /** @description A google maps place id */
          placeId: string;
        };
    /**
     * FiscalType
     * @enum {string}
     */
    FiscalType:
      | "withholding"
      | "witholding-extra"
      | "non-italian"
      | "vat"
      | "company";
    /**
     * Gender
     * @enum {string}
     */
    Gender: "male" | "female" | "not-specified" | "other";
    /** LevelDefinition */
    LevelDefinition: {
      hold?: number;
      id: number;
      name: string;
      reach?: number;
    };
    /** MonthlyLevel */
    MonthlyLevel: {
      id: number;
      name: string;
    };
    Olp: number[] | boolean;
    /** PaginationData */
    PaginationData: {
      limit?: number;
      size: number;
      start: number;
      total?: number;
    };
    Popup: {
      content?: string;
      once?: boolean;
      profiles?:
        | number[]
        | (
            | "all"
            | "italian"
            | "non-italian"
            | "logged-in-year"
            | "not-logged-in-year"
          );
      title?: string;
    };
    /** PreselectionFormQuestion */
    PreselectionFormQuestion: {
      question: string;
      short_name?: string;
    } & (
      | {
          type: components["schemas"]["PreselectionQuestionSimple"];
        }
      | {
          options?: {
            isInvalid?: boolean;
            value: string;
          }[];
          type: components["schemas"]["PreselectionQuestionMultiple"];
        }
      | {
          options?: {
            isInvalid?: boolean;
            value: number;
          }[];
          type: components["schemas"]["PreselectionQuestionCuf"];
        }
    );
    /** PreselectionQuestionCuf */
    PreselectionQuestionCuf: string;
    /**
     * PreselectionQuestionMultiple
     * @enum {string}
     */
    PreselectionQuestionMultiple: "multiselect" | "select" | "radio";
    /**
     * PreselectionQuestionSimple
     * @enum {string}
     */
    PreselectionQuestionSimple: "gender" | "text" | "phone_number" | "address";
    /** Project */
    Project: {
      name?: string;
    };
    /**
     * ProspectStatus
     * @enum {string}
     */
    ProspectStatus: "draft" | "confirmed" | "done";
    RankingItem: {
      id: number;
      image: string;
      monthly_exp: number;
      name: string;
      position: number;
    };
    /** Replicability */
    Replicability: {
      id?: string;
    };
    /** Task */
    Task: components["schemas"]["TaskOptional"] &
      components["schemas"]["TaskRequired"];
    TaskOptional: {
      allow_media?: boolean;
      campaign_id?: number;
      content?: string;
      group?: number;
      name?: string;
    };
    TaskRequired: {
      campaign_id: number;
      content: string;
      name: string;
    };
    /** TranslatablePage */
    TranslatablePage: {
      en?: string;
      es?: string;
      it?: string;
    };
    /** User */
    User: {
      /** Format: email */
      email?: string;
      id?: number;
      /** Format: uri */
      image?: string;
      is_verified?: boolean;
      name?: string;
      role?: string;
      surname?: string;
      username?: string;
      wp_user_id?: number;
    };
    /** UserDevice */
    UserDevice: {
      device:
        | {
            id?: number;
            manufacturer: string;
            model: string;
          }
        | {
            pc_type: string;
          };
      id: number;
      operating_system: {
        id: number;
        platform: string;
        version: string;
      };
      type: string;
    };
  };
  responses: {
    /** Authentication data. The token can be used to authenticate the protected requests */
    Authentication: {
      content: {
        "application/json": {
          exp?: number;
          firstName?: string;
          iat?: number;
          id?: number;
          lastName?: string;
          token?: string;
          username?: string;
        };
      };
    };
    /** An error due to missing required parameters */
    MissingParameters: {
      content: {
        "application/json": {
          message: string;
        };
      };
    };
    /** An error due to insufficient authorization to access the resource */
    NotAuthorized: {
      content: {
        "application/json": {
          code?: string;
          message?: string;
        };
      };
    };
    /** An error due to the resource not existing */
    NotFound: {
      content: {
        "application/json": {
          code?: string;
          element: string;
          id: number;
          message: string;
        };
      };
    };
    /** A single Campaigns with the Campaign id and Project data */
    SingleCampaign: {
      content: {
        "application/json": components["schemas"]["Campaign"] & {
          id: number;
        } & {
          project?: components["schemas"]["Project"] & {
            id?: number;
          };
        };
      };
    };
    /** A user */
    UserData: {
      content: {
        "application/json": components["schemas"]["User"];
      };
    };
  };
  parameters: {
    /** @description A campaign id */
    campaign: string;
    /** @description A customer id */
    customer: string;
    /** @description Key-value Array for item filtering */
    filterBy: { [key: string]: unknown };
    /** @description Max items to retrieve */
    limit: number;
    /** @description How to localize values */
    locale: "en" | "it";
    /** @description How to order values (ASC, DESC) */
    order: "ASC" | "DESC";
    /** @description A project id */
    project: string;
    /** @description The value to search for */
    search: string;
    /** @description A comma separated list of fields which will be searched */
    searchBy: string;
    /** @description Items to skip for pagination */
    start: number;
    /** @description A task id */
    task: string;
    testerId: string;
  };
  requestBodies: {};
}

export interface operations {
  /** Get all routes available for this apis */
  "get-root": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
  };
  /** Retrive all agreements */
  "get-agreements": {
    parameters: {
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: ({
              id: number;
            } & components["schemas"]["Agreement"] & {
                customer: {
                  company: string;
                  id: number;
                };
              })[];
          } & components["schemas"]["PaginationData"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  /** Create a new Agreement */
  "post-agreements": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            agreementId: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          customerId: number;
        } & components["schemas"]["Agreement"];
      };
    };
  };
  /** Get a specific Agreement */
  "get-agreements-agreement-id": {
    parameters: {
      path: {
        agreementId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
          } & components["schemas"]["Agreement"] & {
              customer: {
                company: string;
                id: number;
              };
            };
        };
      };
      403: components["responses"]["Authentication"];
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Put a specific Agreement */
  "put-agreements-agreement-id": {
    parameters: {
      path: {
        agreementId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
          } & components["schemas"]["Agreement"] & {
              customer: {
                company: string;
                id: number;
              };
            };
        };
      };
      403: components["responses"]["NotAuthorized"];
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Agreement"] & {
          customerId: number;
        };
      };
    };
  };
  /** Delete a specific Agreement */
  "delete-agreements-agreement-id": {
    parameters: {
      path: {
        agreementId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      403: components["responses"]["NotFound"];
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** A request to login with your username and password */
  "post-authenticate": {
    parameters: {};
    responses: {
      200: components["responses"]["Authentication"];
      /** Unauthorized */
      401: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
    };
    /** A JSON containing username and password */
    requestBody: {
      content: {
        "application/json": {
          password: string;
          username: string;
        };
      };
    };
  };
  "get-browsers": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              name: string;
            }[];
          };
        };
      };
    };
  };
  "patch-bugs-bugId-status": {
    parameters: {
      path: {
        bugId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          status_id: number;
        };
      };
    };
  };
  "get-campaign-types": {
    parameters: {};
    responses: {
      200: {
        content: {
          "application/json": {
            customRoles: {
              roleId: number;
              userIds: number[];
            }[];
            id: number;
            name: string;
          }[];
        };
      };
    };
  };
  /** Get all the Campaigns you have access to */
  "get-campaigns": {
    parameters: {
      query: {
        fields?: string;
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Return only your campaign? */
        mine?: "true";
        /** A value to search in id or title */
        search?: string;
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The parameter to order by */
        orderBy?: "id" | "startDate" | "endDate";
        filterBy?: unknown;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items?: {
              csm?: {
                id: number;
                name: string;
                surname: string;
              };
              customer?: {
                id?: number;
                name: string;
              };
              customerTitle?: string;
              endDate?: string;
              id?: number;
              name?: string;
              phase?: {
                id: number;
                name: string;
              };
              project?: {
                id?: number;
                name: string;
              };
              quote?: {
                id: number;
                price: string;
                status: string;
              };
              /** @enum {string} */
              resultType?: "bug" | "bugparade" | "no";
              roles?: {
                role: {
                  id: number;
                  name: string;
                };
                user: {
                  id: number;
                  name: string;
                  surname: string;
                };
              }[];
              startDate?: string;
              /** @enum {string} */
              status?: "running" | "closed" | "incoming";
              type?: {
                /** @enum {string} */
                area: "quality" | "experience";
                name: string;
              };
              /** @enum {string} */
              visibility?:
                | "admin"
                | "smallgroup"
                | "logged"
                | "public"
                | "target";
            }[];
          } & components["schemas"]["PaginationData"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new Campaign if you have access to the creation */
  "post-campaigns": {
    responses: {
      201: components["responses"]["SingleCampaign"];
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
    };
    /** The Campaign data to set on the newly created Campaign, including the id of the Project to link the Campaign to */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Campaign"] & {
          project_id?: number;
        };
      };
    };
  };
  "get-campaigns-forms": {
    parameters: {
      query: {
        /** A comma separated list of fields which will be searched */
        searchBy?: components["parameters"]["searchBy"];
        /** The value to search for */
        search?: components["parameters"]["search"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results: {
              campaign?: number;
              id: number;
              name: string;
            }[];
            size: number;
            start: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "post-campaigns-forms": {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            campaign?: {
              id: number;
              name: string;
            };
            fields?: ({
              id: number;
            } & components["schemas"]["PreselectionFormQuestion"])[];
            id: number;
            name: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          campaign?: number;
          creationDate?: string;
          fields: components["schemas"]["PreselectionFormQuestion"][];
          name: string;
        };
      };
    };
  };
  "get-campaigns-forms-formId": {
    parameters: {
      path: {
        formId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            campaign?: {
              id: number;
              name: string;
            };
            fields: ({
              id: number;
            } & components["schemas"]["PreselectionFormQuestion"])[];
            id: number;
            /** @example My form */
            name: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "put-campaigns-forms-formId": {
    parameters: {
      path: {
        formId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            campaign?: {
              id: number;
              name: string;
            };
            fields: ({
              id: number;
            } & components["schemas"]["PreselectionFormQuestion"])[];
            id: number;
            name: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          campaign?: number;
          fields: ({
            id?: number;
          } & components["schemas"]["PreselectionFormQuestion"])[];
          name: string;
        };
      };
    };
  };
  /** Get all the owners of campaigns you have access to */
  "get-campaigns-owners": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
            surname: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "patch-campaigns-campaignId-visibility": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
      /** Internal Server Error */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {undefined} */
          type: "internal" | "target";
        };
      };
    };
  };
  /** Get the data of a Campaign if you have access to it */
  "get-campaigns-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            plan?: {
              id: number;
              name: string;
            };
            preselectionFormId?: number;
            title: string;
            type: string;
            typeDescription: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      /** Not Found */
      404: unknown;
    };
  };
  /** Edit the data of a Campaign if you have access to it */
  "put-campaigns-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      200: components["responses"]["SingleCampaign"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The Campaign data to edit */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CampaignOptional"];
      };
    };
  };
  /** Get all bugs of a Campaign if you have access to it */
  "get-campaigns-cid-bugs": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** The value to search for */
        search?: components["parameters"]["search"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Order values by STATUS, TESTERID, SEVERITY, TYPE, ID */
        orderBy?: "severity" | "testerId" | "status" | "type" | "id";
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: {
              created: string;
              /** @enum {string} */
              duplication: "father" | "unique" | "duplicated";
              id: number;
              internalId: string;
              isFavourite: boolean;
              severity: {
                id: number;
                name: string;
              };
              status: {
                id: number;
                name: string;
              };
              tags?: components["schemas"]["BugTag"][];
              tester: {
                id: number;
              };
              title: string;
              type: {
                id: number;
                name: string;
              };
              updated: string;
            }[];
          } & components["schemas"]["PaginationData"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get single bug of a Campaign if you have access to it */
  "get-campaigns-single-bug": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
        bugId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            actual_result: string;
            description: string;
            expected_result: string;
            id: number;
            media: {
              id: number;
              type: string;
              url: string;
            }[];
            note: string;
            reason: string;
            replicability: {
              id: number;
              name: string;
            };
            severity: components["schemas"]["BugSeverity"];
            status: components["schemas"]["BugStatus"];
            status_history: {
              date: string;
              reason: string;
              status: string;
            }[];
            title: string;
            type: {
              id: number;
              name: string;
            };
            usecase: {
              description: string;
              id: number;
              title: string;
            };
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get ai review for a single bug of a Campaign if you have access to it */
  "get-campaigns-single-bug-ai-review": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
        bugId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            ai_notes?: string;
            ai_reason: string;
            ai_status: string;
            score_percentage: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-campaigns-campaign-candidates": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** The fields to add to the results */
        fields?: string;
        /** Key-value Array for item filtering */
        filterByInclude?: unknown;
        /** Key-value Array for item filtering */
        filterByExclude?: unknown;
        /** Array with min and max */
        filterByAge?: unknown;
        /** Show accepted/candidates or both */
        show?:
          | "onlyAccepted"
          | "onlyCandidates"
          | "all"
          | "candidatesAndExcluded";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results?: {
              age: number;
              businessCps: number;
              businessCpsLastMonth: number;
              devices: {
                id: number;
                manufacturer?: string;
                model?: string;
                os: string;
                osVersion: string;
              }[];
              experience: number;
              gender: components["schemas"]["Gender"];
              id: number;
              levels: {
                bugHunting: string;
                metal: string;
              };
              name: string;
              questions?: {
                id?: number;
                title?: string;
                value?: string;
              }[];
              /** @enum {string} */
              status?: "candidate" | "excluded" | "selected";
              surname: string;
            }[];
          } & components["schemas"]["PaginationData"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** The Tryber will be inserted as a candidate Tryber on a specific Campaign */
  "post-campaigns-campaign-candidates": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              campaignId?: number;
              device?: "any" | number;
              tester_id: number;
            }[];
          };
        };
      };
      /** Multi-Status (WebDAV) */
      207: {
        content: {
          "application/json": {
            invalidTesters?: number[];
            results: {
              campaignId?: number;
              device?: "any" | number;
              tester_id: number;
            }[];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json":
          | {
              device?: number | "random";
              tester_id: number;
            }[]
          | {
              device?: number | "random";
              tester_id: number;
            };
      };
    };
  };
  /** Get all clusters for  a specific campaign */
  "get-campaigns-campaign-clusters": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** A UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": {
            items: {
              id: number;
              name: string;
            }[];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-campaigns-campaign-forms": {
    parameters: {
      path: {
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            question: string;
            shortName?: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all groups used in a Campaign if you have access to it */
  "get-campaigns-cid-groups": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get observations for a campaign */
  "get-campaigns-campaign-observations": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
      query: {
        filterBy?: unknown;
      };
    };
    responses: {
      /** A UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": {
            items: {
              cluster: {
                id: number;
                name: string;
              };
              id: number;
              media: {
                id: number;
                streamUrl: string;
                url: string;
              };
              name: string;
              tester: {
                id: number;
                name: string;
              };
              time: number;
            }[];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-campaigns-campaign-payouts": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            completionRule: {
              bugs?: number;
              usecases?: number;
            };
            maxBonusBug: number;
            testFailure: {
              message: string;
              payout: number;
              points: number;
            };
            testSuccess: {
              message: string;
              payout: number;
              points: number;
            };
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "put-campaigns-campaign-payouts": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            campaign_complete_bonus_eur?: number;
            campaign_pts?: number;
            critical_bug_payout?: number;
            high_bug_payout?: number;
            low_bug_payout?: number;
            medium_bug_payout?: number;
            minimum_bugs?: number;
            payout_limit?: number;
            percent_usecases?: number;
            point_multiplier_critical?: number;
            point_multiplier_high?: number;
            point_multiplier_low?: number;
            point_multiplier_medium?: number;
            point_multiplier_perfect?: number;
            point_multiplier_refused?: number;
            top_tester_bonus?: number;
          };
        };
      };
      400: components["responses"]["MissingParameters"];
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          campaign_complete_bonus_eur?: number;
          campaign_pts?: number;
          critical_bug_payout?: number;
          high_bug_payout?: number;
          low_bug_payout?: number;
          medium_bug_payout?: number;
          minimum_bugs?: number;
          payout_limit?: number;
          percent_usecases?: number;
          point_multiplier_critical?: number;
          point_multiplier_high?: number;
          point_multiplier_low?: number;
          point_multiplier_medium?: number;
          /** Format: float */
          point_multiplier_perfect?: number;
          point_multiplier_refused?: number;
          top_tester_bonus?: number;
        };
      };
    };
  };
  "post-campaigns-campaign-preview": {
    parameters: {
      path: {
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          content: string;
        };
      };
    };
  };
  "get-campaigns-campaign-prospect": {
    parameters: {
      path: {
        campaign: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterByInclude?: unknown;
        /** Key-value Array for item filtering */
        filterByExclude?: unknown;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: {
              bugs: {
                critical: number;
                high: number;
                low: number;
                medium: number;
              };
              experience: {
                completion: number;
                extra: number;
              };
              isCompleted: boolean;
              isTopTester: boolean;
              note: string;
              payout: {
                bug: number;
                completion: number;
                extra: number;
                refund: number;
              };
              /** @enum {string} */
              status: "pending" | "done";
              tester: {
                group: number;
                id: number;
                name: string;
                surname: string;
              };
              usecases: {
                completed: number;
                required: number;
              };
              weightedBugs: number;
            }[];
            status: components["schemas"]["ProspectStatus"];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
      /** Precondition Failed */
      412: unknown;
    };
  };
  /** Make campaign perspective status done, and change exp points and tester payouts. */
  "put-campaigns-campaign-prospect": {
    parameters: {
      path: {
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Modified */
      304: never;
      /** Not Implemented */
      501: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          items: {
            completed: boolean;
            experience: {
              completion: number;
              extra: number;
            };
            note?: string;
            payout: {
              bug: number;
              completion: number;
              extra: number;
              refund: number;
            };
            tester: {
              id: number;
            };
          }[];
          status: components["schemas"]["ProspectStatus"];
        };
      };
    };
  };
  "patch-campaigns-campaign-prospect": {
    parameters: {
      path: {
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Not Modified */
      304: never;
      /** Forbidden */
      403: unknown;
      /** Not Implemented */
      501: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          status?: components["schemas"]["ProspectStatus"];
        };
      };
    };
  };
  "put-campaigns-campaign-prospect-testerId": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        testerId: components["parameters"]["testerId"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            completed: boolean;
            experience: {
              completion: number;
              extra: number;
            };
            note: string;
            payout: {
              bugs: number;
              completion: number;
              extra: number;
              refund: number;
            };
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          completed: boolean;
          experience: {
            completion: number;
            extra: number;
          };
          note: string;
          payout: {
            bugs: number;
            completion: number;
            extra: number;
            refund: number;
          };
        };
      };
    };
  };
  "get-campaigns-campaign-stats": {
    parameters: {
      path: {
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            selected: number;
          };
        };
      };
    };
  };
  /** Get all UseCases linked to a Campaign */
  "get-campaigns-campaign-tasks": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** A list of UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": (components["schemas"]["Task"] & {
            id?: number;
          })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Create a new UseCase and link it to a Campaign */
  "post-campaigns-campaign-tasks": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            content: string;
            id: number;
            title: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The data of the new UseCase to link to the Campaign */
    requestBody: {
      content: {
        "application/json": {
          content: string;
          is_required: number;
          position?: number;
          prefix?: string;
          title: string;
          upload?: {
            language: string;
            /** @enum {string} */
            policy: "optimize" | "allow";
          };
        };
      };
    };
  };
  /** Get the data of a UseCase in a Campaign */
  "get-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
    responses: {
      /** A UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Edit a UseCase in a Campaign */
  "put-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
        /** A task id */
        task: components["parameters"]["task"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Task"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    /** The data to edit in the UseCase linked to the Campaign */
    requestBody: {
      content: {
        "application/json": components["schemas"]["TaskOptional"];
      };
    };
  };
  /** Get the data of a UseCase in a Campaign */
  "get-campaigns-campaign-ux": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** A UseCase linked with the Campaign */
      200: {
        content: {
          "application/json": {
            goal: string;
            methodology: {
              description: string;
              name: string;
              /** @enum {string} */
              type: "qualitative" | "quantitative" | "quali-quantitative";
            };
            questions: {
              id: number;
              name: string;
            }[];
            sentiments: {
              cluster: {
                id: number;
                name: string;
              };
              comment: string;
              id: number;
              value: number;
            }[];
            usersNumber: number;
            visible: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "patch-campaigns-campaign-ux": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      403: components["responses"]["Authentication"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          goal?: string;
          methodology?: {
            description: string;
            type: string;
          };
          questions?: {
            id?: number;
            name: string;
          }[];
          sentiments?: {
            clusterId: number;
            comment: string;
            id?: number;
            value: number;
          }[];
          usersNumber?: number;
          visible?: number;
        };
      };
    };
  };
  /** Get all certificatio */
  "get-certifications": {
    parameters: {
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            area: string;
            id: number;
            institute: string;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-regions": {
    parameters: {
      path: {
        code: string;
      };
      query: {
        languageCode?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            name: string;
            value: string;
          }[];
        };
      };
    };
  };
  "get-customUserFields": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            fields?: components["schemas"]["CustomUserFieldsData"][];
            group: {
              description?: components["schemas"]["TranslatablePage"];
              id: number;
              name: components["schemas"]["TranslatablePage"];
            };
          }[];
        };
      };
    };
  };
  /** Get all the customers you have access to */
  "get-customers": {
    parameters: {};
    responses: {
      /** An array of Customer objects */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
          }[];
        };
      };
      403: components["responses"]["NotFound"];
    };
  };
  "post-customers": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
  };
  "get-customers-customer-projects": {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              name: string;
            }[];
          };
        };
      };
    };
  };
  "post-customers-customer-projects": {
    parameters: {
      path: {
        customer: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
  };
  /** Get all model of devices with theirs manufacturers */
  "get-devices-devices-type-model": {
    parameters: {
      path: {
        device_type: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            manufacturer?: string;
            models?: {
              id?: number;
              name?: string;
            }[];
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all operating systems of a device type */
  "get-devices-operating-systems": {
    parameters: {
      path: {
        device_type: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
            type: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all versions of an operating systems */
  "get-devices-os-versions": {
    parameters: {
      path: {
        device_type: string;
      };
      query: {
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "post-dossiers": {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id: number;
            /** @enum {string} */
            message?: "HOOK_FAILED";
          };
        };
      };
      /** Partial Content */
      206: {
        content: {
          "application/json": {
            id?: number;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DossierCreationData"] & {
          duplicate?: {
            campaign?: number;
            fields?: number;
            mailMerges?: number;
            pages?: number;
            testers?: number;
            useCases?: number;
          };
        } & {
          autoApply?: number;
          bugLanguage?: components["schemas"]["BugLang"];
          hasBugForm?: number;
          hasBugParade?: number;
          /** @enum {string} */
          pageVersion?: "v1" | "v2";
          /** @default 0 */
          skipPagesAndTasks?: number;
        };
      };
    };
  };
  "get-dossiers-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            autoApply: number;
            browsers?: {
              id: number;
              name: string;
            }[];
            /** Format: date-time */
            closeDate: string;
            countries?: components["schemas"]["CountryCode"][];
            csm: {
              id: number;
              name: string;
            };
            customer: {
              id: number;
              name: string;
            };
            description?: string;
            deviceList: {
              id: number;
              name: string;
            }[];
            deviceRequirements?: string;
            /** Format: date-time */
            endDate: string;
            goal?: string;
            id: number;
            languages?: {
              name: string;
            }[];
            notes?: string;
            outOfScope?: string;
            phase: {
              id: number;
              name: string;
            };
            productLink?: string;
            productType?: {
              id: number;
              name: string;
            };
            project: {
              id: number;
              name: string;
            };
            roles?: {
              role?: {
                id: number;
                name: string;
              };
              user?: {
                id: number;
                name: string;
                surname: string;
              };
            }[];
            /** Format: date-time */
            startDate: string;
            target?: {
              cap?: number;
              genderQuote?: string;
              notes?: string;
              size?: number;
            };
            testType: {
              id: number;
              name: string;
            };
            title: {
              customer: string;
              tester: string;
            };
            visibilityCriteria?: {
              ageRanges?: {
                max: number;
                min: number;
              }[];
              cuf?: {
                cufId: number;
                cufValueIds: number[];
              }[];
              gender?: number[];
              province?: string[];
            };
          };
        };
      };
    };
  };
  "put-dossiers-campaign": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DossierCreationData"] & {
          autoApply?: number;
          bugLanguage?: components["schemas"]["BugLang"] | boolean;
          hasBugParade?: number;
        };
      };
    };
  };
  /**  */
  "get-dossiers-campaign-availableTesters": {
    parameters: {
      path: {
        campaign: string;
      };
      query: {
        refresh?: "1" | "0";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            count: number;
            /** Format: date-time */
            lastUpdate: string;
          };
        };
      };
    };
  };
  "post-dossiers-campaign-manual": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          importFrom: number;
        };
      };
    };
  };
  "put-dossiers-campaign-phases": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          phase: number;
        };
      };
    };
  };
  "post-dossiers-campaign-preview": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: components["parameters"]["campaign"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          importFrom: number;
        };
      };
    };
  };
  "post-dossiers-campaign-quotations": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          };
        };
      };
      /** Not Found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          notes?: string;
          quote?: string;
        };
      };
    };
  };
  "patch-dossiers-campaign-quotations-quote": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
        quote: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          amount?: string;
        };
      };
    };
  };
  "get-dossiers-campaign-quotes-history": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: {
              campaign: {
                id: number;
                phase_id: number;
                phase_name: string;
                title: string;
              };
              quote: {
                amount: string;
                id: number;
                /** @enum {string} */
                status: "pending" | "proposed" | "approved" | "rejected";
              };
            }[];
          };
        };
      };
    };
  };
  /** Get all education levels */
  "get-education": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all employments */
  "get-employments": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-jotforms": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            createdAt: string;
            id: string;
            name: string;
          }[];
        };
      };
      /** Forbidden */
      403: unknown;
    };
  };
  "get-jotforms-forms-formId-questions": {
    parameters: {
      path: {
        formId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            description?: string;
            id: string;
            name: string;
            title: string;
            type: string;
          }[];
        };
      };
      /** Forbidden */
      403: unknown;
    };
  };
  "post-jotforms-campaignId": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** Forbidden */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": {
          formId: string;
          testerIdColumn: string;
        };
      };
    };
  };
  /** Get all languages */
  "get-languages": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all levels */
  "get-levels": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LevelDefinition"][];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Send a media for my bug to AppQuality Bucket. */
  "post-media": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            failed?: {
              errorCode: string;
              name: string;
            }[];
            files: {
              name: string;
              path: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          media?: string | string[];
        };
      };
    };
  };
  "delete-media": {
    parameters: {};
    responses: {
      /** OK */
      200: unknown;
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: uri */
          url: string;
        };
      };
    };
  };
  "get-payments": {
    parameters: {
      query: {
        /** The status of the payment */
        status?: "pending" | "failed";
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The value to order by */
        orderBy?: "created" | "updated" | "id";
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: {
              amount: {
                currency: string;
                value: number;
              };
              /** @description The timestamp (GMT) of the request creation */
              created: string;
              error?: string;
              id: number;
              tryber: {
                id: number;
                name: string;
                surname: string;
              };
              /** @enum {string} */
              type: "paypal" | "transferwise";
              /** @description The timestamp (GMT) of the request last update */
              updated: string;
            }[];
            limit?: number;
            size: number;
            start: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  "post-payments-paymentId": {
    parameters: {
      path: {
        paymentId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: {
        content: {
          "application/json": {
            /** @enum {string} */
            element: "payments";
            id: number;
            message: Partial<{
              /** @enum {string} */
              code: "GENERIC_ERROR";
              data: string;
            }> &
              Partial<string>;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
      /** Unprocessable Entity (WebDAV) */
      422: {
        content: {
          "application/json": {
            /** @enum {string} */
            element: "payments";
            id: number;
            message: {
              /** @enum {string} */
              code:
                | "GENERIC_ERROR"
                | "NO_FUNDS"
                | "DUPLICATE_PAYMENT"
                | "IBAN_NOT_VALID"
                | "INSUFFICIENT_FUNDS"
                | "RECEIVER_UNREGISTERED";
              data: string;
            };
          };
        };
      };
    };
  };
  /** delete a specific payment request */
  "delete-payments-paymentId": {
    parameters: {
      path: {
        paymentId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-phases": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              name: string;
              type: {
                id: number;
                name: string;
              };
            }[];
          };
        };
      };
    };
  };
  /** Retrieve all available popups for admin operations */
  "get-popups": {
    parameters: {
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id?: number;
          } & components["schemas"]["Popup"])[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** The new popup will be inserted as an available popup on admin areas */
  "post-popups": {
    parameters: {};
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Popup"];
      };
    };
  };
  /** Retrieve a signle popup for admin operations */
  "get-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  /** Edit your popup with a new content or new rules */
  "patch-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Popup"];
      };
    };
  };
  "get-productTypes": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              name: string;
            }[];
          };
        };
      };
    };
  };
  /** Get all users you have access to */
  "get-users": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
    };
  };
  /** Create a new user */
  "post-users": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id: number;
          };
        };
      };
      /** Precondition Failed */
      412: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: date */
          birthDate: string;
          country: string;
          /** Format: email */
          email: string;
          name: string;
          password: string;
          /**
           * @description A referral code (formatted as TESTER_ID-CAMPAIGN_ID)
           * @example 555-1234
           */
          referral?: string;
          surname: string;
        };
      };
    };
  };
  "head-users-by-email-email": {
    parameters: {
      path: {
        email: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Bad Request */
      400: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  "get-users-by-role-role": {
    parameters: {
      path: {
        role: "tester_lead" | "quality_leader" | "ux_researcher" | "assistants";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            results: {
              id: number;
              name: string;
              surname: string;
            }[];
          };
        };
      };
    };
  };
  /** Get your user data */
  "get-users-me": {
    parameters: {
      query: {
        /** Comma separated string of specific fields requested */
        fields?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            additional?: components["schemas"]["AdditionalField"][];
            approved_bugs?: number;
            attended_cp?: number;
            /** Format: date */
            birthDate?: string;
            booty?: {
              gross: components["schemas"]["Currency"];
              net?: components["schemas"]["Currency"];
            };
            booty_threshold?: {
              isOver: boolean;
              value: number;
            };
            certifications?: components["schemas"]["Certification"][] | boolean;
            city?: string;
            completionPercent?: number;
            country?: string;
            education?: {
              id: number;
              name: string;
            };
            /** Format: email */
            email?: string;
            gender?: components["schemas"]["Gender"];
            id: number;
            image?: string;
            is_verified?: boolean;
            languages?: {
              name?: string;
            }[];
            name?: string;
            onboarding_completed?: boolean;
            pending_booty?: {
              gross: components["schemas"]["Currency"];
              net?: components["schemas"]["Currency"];
            };
            phone?: string;
            profession?: {
              id: number;
              name: string;
            };
            rank?: string;
            role?: string;
            surname?: string;
            total_exp_pts?: number;
            username?: string;
            wp_user_id?: number;
          };
        };
      };
    };
  };
  /** Edit your user data */
  "put-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["User"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          email?: string;
          name?: string;
          password?: string;
          surname?: string;
        };
      };
    };
  };
  "delete-users-me": {
    responses: {
      /** OK */
      200: unknown;
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          reason: string;
        };
      };
    };
  };
  /** Edit basic user fields */
  "patch-users-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            additional?: components["schemas"]["AdditionalField"][];
            approved_bugs?: number;
            attended_cp?: number;
            /** Format: date */
            birthDate?: string;
            booty?: {
              gross: components["schemas"]["Currency"];
              net?: components["schemas"]["Currency"];
            };
            certifications?: components["schemas"]["Certification"][] | boolean;
            city?: string;
            completionPercent?: number;
            country?: string;
            education?: {
              id: number;
              name: string;
            };
            email?: string;
            /** @enum {string} */
            gender?: "male" | "female" | "not-specified" | "other";
            id: number;
            image?: string;
            is_verified?: boolean;
            languages?: {
              id?: number;
              name?: string;
            }[];
            name?: string;
            onboarding_completed?: boolean;
            pending_booty?: {
              gross: components["schemas"]["Currency"];
              net?: components["schemas"]["Currency"];
            };
            phone?: string;
            profession?: {
              id: number;
              name: string;
            };
            rank?: string;
            role?: string;
            surname?: string;
            total_exp_pts?: number;
            username?: string;
            wp_user_id?: number;
          };
        };
      };
      /** Bad Request */
      400: unknown;
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          birthDate?: string;
          city?: string;
          country?: string;
          education?: number;
          /** Format: email */
          email?: string;
          /** @enum {string} */
          gender?: "male" | "female" | "not-specified" | "other";
          name?: string;
          oldPassword?: string;
          onboarding_completed?: boolean;
          password?: string;
          phone?: string;
          profession?: number;
          surname?: string;
        };
      };
    };
  };
  /** The field data will be replaced with your new data */
  "put-users-me-additionals-fieldId": {
    parameters: {
      path: {
        /** The id of the field to edit */
        fieldId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json":
            | components["schemas"]["AdditionalField"][]
            | components["schemas"]["AdditionalField"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json":
          | {
              is_candidate?: boolean;
              value: string;
            }[]
          | {
              is_candidate?: boolean;
              value: string;
            };
      };
    };
  };
  /** Get all the bugs that you uploaded to AppQuality. */
  "get-users-me-bugs": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** The field for item order */
        orderBy?: "title" | "campaign" | "status" | "id" | "severity";
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results: ({
              id: number;
            } & components["schemas"]["Bug"])[];
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /**
   * get available, and selected campaigns for a single user.
   * filterBy[accepted] = 1 retrieve accepted campaign only, otherwise retrieve available campaign.
   * filterBy[completed] = 1 get completed campaigns only (end date in the past)
   * filterBy[completed] = 0 get not completed campaigns only (end date today or in the future)
   * filterBy[statusID] = 1 get open campaigns
   * filterBy[statusID] = 2 get closed campaigns
   */
  "get-users-me-campaigns": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** How to localize values */
        locale?: components["parameters"]["locale"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The field for item order */
        orderBy?:
          | "name"
          | "start_date"
          | "end_date"
          | "close_date"
          | "visibility";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results?: ({
              id: number;
            } & components["schemas"]["Campaign"])[];
            size?: number;
            start?: number;
            total?: number;
          };
        };
      };
      /** Forbidden */
      403: unknown;
      /** Not Found */
      404: unknown;
    };
  };
  "get-users-me-campaigns-campaignId": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            additionalFields?: components["schemas"]["CampaignAdditionalField"][];
            bugReplicability: {
              invalid: string[];
              valid: string[];
            };
            bugSeverity: {
              invalid: string[];
              valid: string[];
            };
            bugTypes: {
              invalid: string[];
              valid: string[];
            };
            campaign_type: {
              icon: string;
              id: number;
              name: string;
            };
            devices?: ({
              id: number;
            } & components["schemas"]["UserDevice"])[];
            end_date: string;
            goal: string;
            hasBugForm: boolean;
            hasBugParade: number;
            id: number;
            language?: {
              code: string;
              message: string;
            };
            minimumMedia: number;
            title: string;
            titleRule?: boolean;
            useCases: {
              id: number;
              name: string;
            }[];
            validFileExtensions: string[];
          };
        };
      };
    };
  };
  /** Send a user bug on a specific campaign */
  "post-users-me-campaigns-campaign-bugs": {
    parameters: {
      path: {
        /** the campaign id */
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            additional?: {
              slug: string;
              value: string;
            }[];
            current: string;
            description: string;
            device: components["schemas"]["UserDevice"];
            expected: string;
            id: number;
            internalId?: string;
            media: string[];
            notes: string;
            /** @enum {string} */
            replicability: "ONCE" | "SOMETIMES" | "ALWAYS";
            /** @enum {string} */
            severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
            /** @enum {string} */
            status: "PENDING" | "APPROVED" | "REFUSED" | "NEED-REVIEW";
            testerId: number;
            title: string;
            type: string;
            usecase: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          additional?: {
            slug: string;
            value: string;
          }[];
          current: string;
          description: string;
          device: number;
          expected: string;
          lastSeen: string;
          media: string[];
          notes: string;
          /** @enum {string} */
          replicability: "ONCE" | "SOMETIMES" | "ALWAYS";
          /** @enum {string} */
          severity: "LOW" | "MEDIUM" | "HIGH" | "CRITICAL";
          title: string;
          type: string;
          usecase: number;
        };
      };
    };
  };
  "get-users-me-campaigns-campaignId-devices": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserDevice"][];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-users-me-campaign-campaignId-forms": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id: number;
            question: string;
            short_name?: string;
            validation?: {
              error?: string;
              regex: string;
            };
            value?:
              | number
              | {
                  city?: string;
                  country?: string;
                }
              | number[]
              | string;
          } & (
            | {
                type: components["schemas"]["PreselectionQuestionSimple"];
              }
            | {
                options: string[];
                type: components["schemas"]["PreselectionQuestionMultiple"];
              }
            | {
                options?: number[];
                type: components["schemas"]["PreselectionQuestionCuf"];
              }
          ))[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "post-users-me-campaigns-campaignId-forms": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          device?: number[];
          form?: {
            question: number;
            value: {
              id?: number | number[];
              serialized?:
                | string
                | string[]
                | {
                    city: string;
                    country: string;
                  };
            };
          }[];
        };
      };
    };
  };
  "post-users-me-campaigns-campaignId-media": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            failed?: {
              /** @enum {string} */
              errorCode:
                | "FILE_TOO_BIG"
                | "INVALID_FILE_EXTENSION"
                | "GENERIC_ERROR";
              name: string;
            }[];
            files?: {
              name: string;
              path: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          media?: string | string[];
        };
      };
    };
  };
  "get-users-me-campaigns-cid-payout-data": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            campaign_complete_bonus_eur: number;
            campaign_pts: number;
            critical_bug_payout: number;
            high_bug_payout: number;
            low_bug_payout: number;
            medium_bug_payout: number;
            minimum_bugs: number;
            payout_limit: number;
            percent_usecases: number;
            point_multiplier_critical: number;
            point_multiplier_high: number;
            point_multiplier_low: number;
            point_multiplier_medium: number;
            point_multiplier_perfect: number;
            point_multiplier_refused: number;
            top_tester_bonus: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-users-me-campaigns-cid-preview": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            acceptedDevices: {
              console?: components["schemas"]["AvailableDevice"][] | "all";
              pc?: components["schemas"]["AvailableDevice"][] | "all";
              smartTv?: components["schemas"]["AvailableDevice"][] | "all";
              smartphone?: components["schemas"]["AvailableDevice"][] | "all";
              smartwatch?: components["schemas"]["AvailableDevice"][] | "all";
              tablet?: components["schemas"]["AvailableDevice"][] | "all";
            };
            cap?: {
              free: number;
              value: number;
            };
            content: string;
            endDate: string;
            /** @enum {string} */
            selectionStatus?:
              | "starting"
              | "excluded"
              | "ready"
              | "complete"
              | "not-started";
            startDate: string;
            /** @enum {string} */
            status: "available" | "applied" | "excluded" | "selected";
            title: string;
            tl?: {
              email: string;
              name: string;
            };
            type: {
              icon: string;
              name: string;
            };
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "get-users-me-campaign-campaignId-tasks": {
    parameters: {
      path: {
        campaignId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            can_upload_media: boolean;
            content: string;
            id: number;
            is_required: number;
            name: string;
            /** @enum {string} */
            status: "completed" | "pending";
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "post-users-me-campaigns-campaign-tasks-task": {
    parameters: {
      path: {
        /** the campaign id */
        campaignId: string;
        taskId: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          /** @enum {undefined} */
          status: "completed";
        };
      };
    };
  };
  /** Return a list of tester media uploaded on a specific Usecase of a specific Campaign */
  "get-users-me-campaigns-campaignId-tasks-taskId-media": {
    parameters: {
      path: {
        campaignId: string;
        taskId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            items: {
              id: number;
              location: string;
              name: string;
              mimetype?: string;
            }[];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  "post-users-me-campaigns-campaignId-tasks-taskId-media": {
    parameters: {
      path: {
        campaignId: string;
        taskId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            failed?: {
              /** @enum {string} */
              errorCode:
                | "FILE_TOO_BIG"
                | "INVALID_FILE_EXTENSION"
                | "GENERIC_ERROR";
              name: string;
            }[];
            files?: {
              name: string;
              path: string;
            }[];
          };
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          media?: string | string[];
        };
      };
    };
  };
  /** Delete a specific media of a specific campaign task if authorized */
  "delete-users-me-campaigns-campaignId-tasks-taskId-media-mediaId": {
    parameters: {
      path: {
        campaignId: string;
        taskId: string;
        mediaId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": { [key: string]: unknown };
        };
      };
      /** Forbidden */
      403: unknown;
      404: components["responses"]["NotFound"];
    };
  };
  "get-users-me-campaigns-campaignId-compatible-devices": {
    parameters: {
      path: {
        /** A campaign id */
        campaign: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserDevice"][];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Add one certification to your profile */
  "post-users-me-certifications": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json":
            | components["schemas"]["Certification"]
            | {
                message: string;
              };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json":
          | {
              certifications: boolean;
            }
          | {
              /** Format: date */
              achievement_date: string;
              certification_id: number;
            };
      };
    };
  };
  /** The certification will be removed */
  "delete-users-me-certifications-certificationId": {
    parameters: {
      path: {
        /** The id of the certification */
        certificationId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get all your device data */
  "get-users-me-devices": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": ({
            id?: number;
          } & components["schemas"]["UserDevice"] & {
              [key: string]: unknown;
            })[];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Add a new device to your user */
  "post-users-me-devices": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          device:
            | number
            | (
                | "Notebook"
                | "Desktop"
                | "Ultrabook"
                | "Gaming PC"
                | "Tablet PC / Hybrid"
              );
          operating_system: number;
        };
      };
    };
  };
  /** Retrieve a single device */
  "get-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** The device will be disabled and won't be available for selections and bugs submission. You can't remove a device currently involved in a campaign */
  "delete-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** You can change only operating system version */
  "patch-users-me-devices-deviceId": {
    parameters: {
      path: {
        deviceId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      /** Not Modified */
      304: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["UserDevice"];
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
    requestBody: {
      content: {
        "application/json": {
          operating_system: number;
        };
      };
    };
  };
  /** Get all the experience points earned in AppQuality. */
  "get-users-me-experience": {
    parameters: {
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** A comma separated list of fields which will be searched */
        searchBy?: components["parameters"]["searchBy"];
        /** The value to search for */
        search?: components["parameters"]["search"];
        /** The field for item order */
        orderBy?: "amount" | "campaign" | "date" | "note" | "activity" | "id";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results: {
              activity: {
                id: number;
              };
              amount: number;
              campaign: {
                id: number;
                title?: string;
              };
              /** Format: date */
              date: string;
              id: number;
              note?: string;
            }[];
            size?: number;
            start?: number;
            /** @description The total sum of experience */
            sum: number;
            /** @description The total number of experience entries */
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Get your fiscal profile data */
  "get-users-me-fiscal": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            address: {
              city: string;
              cityCode: string;
              country: string;
              province: string;
              street: string;
              streetNumber?: string;
            };
            birthPlace: {
              city?: string;
              province?: string;
            };
            fiscalId: string;
            /** @enum {string} */
            fiscalStatus: "Verified" | "Unverified";
            /** @enum {string} */
            gender: "male" | "female";
            type: components["schemas"]["FiscalType"] | "internal";
          };
        };
      };
      401: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Update your fiscal data */
  "put-users-me-fiscal": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            address: {
              city: string;
              cityCode: string;
              country: string;
              province: string;
              street: string;
              streetNumber?: string;
            };
            birthPlace?: {
              city?: string;
              province?: string;
            };
            fiscalId: string;
            /** @enum {string} */
            fiscalStatus: "Verified" | "Unverified";
            /** @enum {string} */
            gender: "male" | "female";
            type: components["schemas"]["FiscalType"];
          };
        };
      };
      401: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          address: {
            city: string;
            cityCode: string;
            country: string;
            province: string;
            street: string;
            streetNumber: string;
          };
          birthPlace?: components["schemas"]["FiscalBirthCity"];
          fiscalId: string;
          /** @enum {string} */
          gender: "male" | "female";
          type: components["schemas"]["FiscalType"];
        };
      };
    };
  };
  /** Create a new fiscal data entry from empty state */
  "post-users-me-fiscal": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            address: {
              city: string;
              cityCode: string;
              country: string;
              province: string;
              street: string;
              streetNumber?: string;
            };
            birthPlace?: {
              city?: string;
              province?: string;
            };
            fiscalId: string;
            /** @enum {string} */
            fiscalStatus: "Verified" | "Unverified";
            /** @enum {string} */
            gender: "male" | "female";
            type: components["schemas"]["FiscalType"];
          };
        };
      };
      401: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          address: {
            city: string;
            cityCode: string;
            country: string;
            province: string;
            street: string;
            streetNumber: string;
          };
          birthPlace?: components["schemas"]["FiscalBirthCity"];
          fiscalId: string;
          /** @enum {string} */
          gender: "male" | "female";
          type: components["schemas"]["FiscalType"];
        };
      };
    };
  };
  /** Edit your spoken languages */
  "put-users-me-languages": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            name?: string;
          }[];
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": string[];
      };
    };
  };
  /** Add one of the languages to your profile */
  "post-users-me-languages": {
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": {
            name: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          language_name?: string;
        };
      };
    };
  };
  /** The language will be removed from your profile */
  "delete-users-me-languages-languageId": {
    parameters: {
      path: {
        /** The id of the language */
        languageId: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            message?: string;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Return all payment requests */
  "get-users-me-payments": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** The field for item order */
        orderBy?: string;
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results?: ({
              id: number;
            } & {
              amount: {
                gross: components["schemas"]["Currency"];
                net: components["schemas"]["Currency"];
              };
              method: {
                note: string;
                /** @enum {string} */
                type: "paypal" | "iban";
              };
              paidDate: string;
              /** Format: uri-reference */
              receipt?: string;
              /** @enum {string} */
              status: "paid" | "processing";
            })[];
            size: number;
            start: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  "post-users-me-payments": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            amount?: number;
            id?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
    requestBody: {
      content: {
        "application/json": {
          method:
            | {
                email: string;
                /** @enum {string} */
                type: "paypal";
              }
            | {
                accountHolderName: string;
                iban: string;
                /** @enum {string} */
                type: "iban";
              };
        };
      };
    };
  };
  /** Return all attributions of a specific request */
  "get-users-me-payments-payment": {
    parameters: {
      path: {
        payment: string;
      };
      query: {
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** The value to order by */
        orderBy?: "type" | "date" | "activity" | "net" | "gross";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results: ({
              id: number;
            } & {
              activity: string;
              amount: {
                gross: components["schemas"]["Currency"];
                net?: components["schemas"]["Currency"];
              };
              /** Format: date */
              date: string;
              type: string;
            })[];
            size: number;
            start: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Return all single attributions that dials the pending booty */
  "get-users-me-pending-booty": {
    parameters: {
      query: {
        /** Items to skip for pagination */
        start?: components["parameters"]["start"];
        /** Max items to retrieve */
        limit?: components["parameters"]["limit"];
        /** The field for item order */
        orderBy?:
          | "id"
          | "attributionDate"
          | "activityName"
          | "net"
          | "gross"
          | "activity";
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
        /** Key-value Array for item filtering */
        filterBy?: components["parameters"]["filterBy"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            limit?: number;
            results?: ({
              id: number;
            } & {
              activity: string;
              amount: {
                gross: components["schemas"]["Currency"];
                net?: components["schemas"]["Currency"];
              };
              /** Format: date */
              attributionDate: string;
              name: string;
            })[];
            size: number;
            start: number;
            total?: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
  /** Return all user permissions */
  "get-users-me-permissions": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            appq_bug?: components["schemas"]["Olp"];
            appq_campaign?: components["schemas"]["Olp"];
            appq_message_center?: components["schemas"]["Olp"];
            appq_prospect?: components["schemas"]["Olp"];
            appq_tester_selection?: components["schemas"]["Olp"];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      /** Internal Server Error */
      500: unknown;
    };
  };
  /** Get all popup defined for your user */
  "get-users-me-popups": {
    parameters: {
      query: {
        /** Show all popup history, expired popups included */
        showExpired?: boolean;
        /** How to order values (ASC, DESC) */
        order?: components["parameters"]["order"];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            content?: string;
            id?: number;
            once?: boolean;
            title?: string;
          }[];
        };
      };
      404: components["responses"]["NotFound"];
    };
  };
  /** Get a single popup. Will set the retrieved popup as expired */
  "get-users-me-popups-popup": {
    parameters: {
      path: {
        popup: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            id?: number;
          } & components["schemas"]["Popup"];
        };
      };
    };
  };
  "get-users-me-rank": {
    parameters: {};
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            level: components["schemas"]["MonthlyLevel"];
            points: number;
            previousLevel: components["schemas"]["MonthlyLevel"];
            prospect: {
              level: components["schemas"]["MonthlyLevel"];
              maintenance?: number;
              next?: {
                level: components["schemas"]["MonthlyLevel"];
                points: number;
              };
            };
            rank: number;
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
    };
  };
  "get-users-me-rank-list": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            peers: components["schemas"]["RankingItem"][];
            tops: components["schemas"]["RankingItem"][];
          };
        };
      };
      403: components["responses"]["NotAuthorized"];
      404: components["responses"]["NotFound"];
    };
  };
}

export interface external {}
